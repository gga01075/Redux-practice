{"version":3,"sources":["components/Counter.js","App.js","store/index.js","index.js","components/Counter.module.css"],"names":["Counter","counter","useSelector","state","showCounter","dispatch","useDispatch","incrementHandler","type","amount","className","classes","value","onClick","App","initialState","store","createStore","action","ReactDOM","createRoot","document","getElementById","render","module","exports"],"mappings":"8MAwCeA,EArCC,WAMd,IAAMC,EAAUC,aAAY,SAACC,GAAK,OAAKA,EAAMF,OAAO,IAC9CG,EAAcF,aAAY,SAACC,GAAK,OAAKA,EAAMC,WAAW,IACtDC,EAAWC,cAMXC,EAAmB,WACvBF,EAAS,CAACG,KAAK,YAAaC,OAAO,GACrC,EAOA,OACE,uBAAMC,UAAWC,IAAQV,QAAQ,UAC/B,+CACCG,GAAe,qBAAKM,UAAWC,IAAQC,MAAM,SAAEX,IAChD,gCACE,wBAAQY,QAASN,EAAiB,uBAClC,wBAAQM,QAASN,EAAiB,2BAClC,wBAAQM,QAZW,WACvBR,EAAS,CAACG,KAAK,aACjB,EAUwC,0BAEpC,wBAAQK,QAtBiB,WAC3BR,EAAS,CAACG,KAAK,UACjB,EAoB0C,8BAG5C,EC7BeM,MANf,WACE,OACE,cAAC,EAAO,GAEZ,E,QCLMC,EAAe,CAAEd,QAAU,EAAGG,aAAa,GAwB3CY,EAAQC,aAtBS,WAAoC,IAAnCd,EAAK,uDAAGY,EAAcG,EAAM,uCAChD,MAAmB,cAAhBA,EAAOV,KACC,CACHP,QAAUE,EAAMF,QAAUiB,EAAOT,OACjCL,YAAcD,EAAMC,aAEF,cAAhBc,EAAOV,KACN,CACHP,QAAUE,EAAMF,QAAU,EAC1BG,YAAcD,EAAMC,aAED,WAAhBc,EAAOV,KACP,CACHP,QAAUE,EAAMF,QAChBG,aAAeD,EAAMC,aAItBD,CACX,IAKea,ICnBFG,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAAC,IAAQ,CAACP,MAAOA,EAAM,SAAC,cAAC,EAAG,M,oBCTxCQ,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,uB","file":"static/js/main.2a4f48c5.chunk.js","sourcesContent":["import classes from \"./Counter.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst Counter = () => {\n  /* \n   useSelector 사용이유 : 함수가 어떤 데이터를 스토어에서 추출할지 결정하는데\n   규모가 큰 애플리케이션에서는 다양한 프로퍼티와 네스트 객체, 배열이 있다. \n   따라서 전체 상태 객체에서 일부만 받을 수 있는 useSelector를 사용하였다.\n  */\n  const counter = useSelector((state) => state.counter);\n  const showCounter = useSelector((state) => state.showCounter);\n  const dispatch = useDispatch();\n\n  const toggleCounterHandler = () => {\n    dispatch({type:'toggle'})\n  };\n\n  const incrementHandler = () => {\n    dispatch({type:'increment', amount:5});\n  }\n\n  const decrementHandler = () => {\n    dispatch({type:'decrement'});\n  }\n\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {showCounter && <div className={classes.value}>{counter}</div>}\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={incrementHandler}>Increase by 5</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n","import Counter from './components/Counter';\n\n\nfunction App() {\n  return (\n    <Counter />\n  );\n}\n\nexport default App;\n","import { createStore } from 'redux';\r\n\r\nconst initialState = { counter : 0, showCounter: true}\r\n\r\nconst counterReducer = (state = initialState, action ) => {\r\n    if(action.type === 'increment') {\r\n        return { \r\n            counter : state.counter + action.amount,\r\n            showCounter : state.showCounter\r\n        }\r\n    } else if(action.type === 'decrement') {\r\n        return { \r\n            counter : state.counter - 1,\r\n            showCounter : state.showCounter\r\n        }\r\n    } else if (action.type === 'toggle') {\r\n        return { \r\n            counter : state.counter,\r\n            showCounter : !state.showCounter\r\n        }\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Provider store={store}><App /></Provider>);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__3leMF\",\"value\":\"Counter_value__1edYJ\"};"],"sourceRoot":""}